* Final push report roadmap
** Introduction
- Done, not 100% happy with the writing
  - Some weird sentences
  - But mostly missing connectors/flow
** Model description
- Too much as a section
  - I wanted to avoid going over the whole model but 
  - Hard to explain the fixes
  - Appendix
- Multi-chain and simplification modifications can be explained conceptually
- We don't have to include any notation on the main sections apart from the linear combination
** Procedure
- Done, not 100% happy with the writing
** Analysis
- Jin's original Done
- Multichain Done
- Symbolic simplification
  - Thought of using =Metatheory.jl= but no
  - A custom number type that is not a subset of Number and copied all the method definitions from =SymbolicUtils.jl=
    - Except the ones that introduce new functions
  - Copy-paste boilerplate and 
  - Ready to run
- Simplify + multichain
  - Same code, merge and ready to run
- Evolutionary
  - Accepted PR with fix
  - Need to stress test memory usage
  - Need to do the JSON parsing and analysis
** Results
- Graphs
- Writeup
** Discussion
- Writeup
** Showcase with =rtdists= data
** Re-check format/citations
** Code
- Better code style for analysis code
- Export to a new repo (analysis + document) without meetings and the rest
* The main discussion point
- Generative additive models thing with OLS... This has to affect the /properness/ of the MCMC sampler right?
  - The literature on Bayesian generative additive models is a (complex, unfamiliar) rabbit hole
- The main "real" difference between the evolutionary algorithm and the Bayesian one is that we use the transition probabilities
- We don't get anything Bayesian from it (confidence probabilities)
- The other differences are
  - Linear operators
  - Growing distribution
  - OLS
  - Similar but different tree movements
- If one algorithm is better than the other is not because of the general approach, but because of the specifics
** And then limitations and all that

* Wrapping up
- Feedback whenever you can
- Complete report by Wednesday hopefully :D
- Last round of feedback
- Evaluation?

* Future of the package
- Depending of if we think it's worth
- Rewrite with =Symbolics.jl= API
- Maybe contribute it back to =SymbolicRegression.jl=
  - The maintainer seems very nice
  - The Symbolics.jl/SciML people are interested in incorporating the package in their ecosystem
  - They have to rewrite their codebase to use the new stable Symbolics.jl API
